package com.ftn.sbnz.rules.backward;

import com.ftn.sbnz.model.models.Mineral;
import com.ftn.sbnz.model.models.MineralHierarchy;
import com.ftn.sbnz.model.models.RecursiveSearchQuery;
import java.util.List;

global java.util.List recommendations;

query isMemberOfGroup(String subType, String superType)
    // base case
    MineralHierarchy(subType, superType;)
    or
    (
        MineralHierarchy(subType, $intermediate;) and
        isMemberOfGroup($intermediate, superType;)
    )
end

rule "Find and Recommend Minerals from Group"
    when

        $query: RecursiveSearchQuery($group: mineralGroup, $loc: location)

        $m: Mineral(name != null, locations contains $loc)

        isMemberOfGroup($m.getName(), $group;)
    then
        System.out.println("Pronađen član grupe '" + $group + "' na lokaciji '" + $loc + "': " + $m.getName());
        recommendations.add($m);
end