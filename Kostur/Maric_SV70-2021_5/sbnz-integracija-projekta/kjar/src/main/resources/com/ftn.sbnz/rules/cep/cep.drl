package com.ftn.sbnz.rules.cep;

import com.ftn.sbnz.model.events.PotentialDiscoveryEvent;
import com.ftn.sbnz.model.events.HotspotAlertFired; // Importujemo kontrolnu činjenicu
import com.ftn.sbnz.model.models.NotificationRequest;
import java.util.List;
import java.util.UUID;

rule "Detect Undocumented Hotspot"
    no-loop true
    when
        $trigger: PotentialDiscoveryEvent(
            $mineralId: mineralId,
            $location: location
        )
        $events: List(size >= 5) from accumulate (
            $e: PotentialDiscoveryEvent(
                mineralId == $mineralId,
                location == $location
            ) over window:time(45d),
            collectList($e)
        )
        eval(com.ftn.sbnz.model.utils.CepHelper.hasEnoughUsersForHotspot($events))

        not HotspotAlertFired(mineralId == $mineralId, location == $location)
    then
        System.out.println("-----------------------------------------------------------------");
        System.out.println("!!! UPOZORENJE ADMINISTRATORU: DETEKTOVAN NOVI HOTSPOT !!!");
        System.out.println("Mineral: " + $trigger.getMineralName());
        System.out.println("Lokacija: " + $trigger.getLocation());
        System.out.println("Broj prijava: " + $events.size());
        System.out.println("-----------------------------------------------------------------");

        String message = String.format(
            "Detektovan novi potencijalni hotspot za mineral '%s' na lokaciji '%s' (%d prijava).",
            $trigger.getMineralName(), $trigger.getLocation(), $events.size()
        );
        drools.insert(new NotificationRequest(message));

        drools.insert(new HotspotAlertFired($trigger.getMineralId(), $trigger.getLocation(), null));
end